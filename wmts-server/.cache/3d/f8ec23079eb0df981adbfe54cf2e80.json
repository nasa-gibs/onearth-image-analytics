{"id":"../../../node_modules/ol/asserts.js","dependencies":[{"name":"/Users/jaaustin/node_modules/ol/asserts.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/jaaustin/Documents/ml-server/wmts-server/package.json","includedInParent":true,"mtime":1560987598999},{"name":"/Users/jaaustin/node_modules/ol/package.json","includedInParent":true,"mtime":1559664113128},{"name":"./AssertionError.js","loc":{"line":4,"column":27},"parent":"/Users/jaaustin/node_modules/ol/asserts.js","resolved":"/Users/jaaustin/node_modules/ol/AssertionError.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = assert;\n\nvar _AssertionError = _interopRequireDefault(require(\"./AssertionError.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/asserts\n */\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nfunction assert(assertion, errorCode) {\n  if (!assertion) {\n    throw new _AssertionError.default(errorCode);\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/ol/asserts.js","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":7},"generated":{"line":20,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":16},"generated":{"line":20,"column":9}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":7},"generated":{"line":20,"column":15}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":23},"generated":{"line":20,"column":16}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":7},"generated":{"line":20,"column":25}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":34},"generated":{"line":20,"column":27}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":7},"generated":{"line":20,"column":36}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":10,"column":45},"generated":{"line":20,"column":38}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":11,"column":2},"generated":{"line":21,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":11,"column":6},"generated":{"line":21,"column":6}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":11,"column":7},"generated":{"line":21,"column":7}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":11,"column":2},"generated":{"line":21,"column":16}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":11,"column":18},"generated":{"line":21,"column":18}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":4},"generated":{"line":22,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":10},"generated":{"line":22,"column":10}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":14},"generated":{"line":22,"column":14}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":10},"generated":{"line":22,"column":37}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":29},"generated":{"line":22,"column":38}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":10},"generated":{"line":22,"column":47}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":12,"column":4},"generated":{"line":22,"column":48}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":13,"column":3},"generated":{"line":23,"column":0}},{"source":"../../src/ol/asserts.js","name":null,"original":{"line":14,"column":1},"generated":{"line":24,"column":0}}],"sources":{"../../src/ol/asserts.js":"/**\n * @module ol/asserts\n */\nimport AssertionError from './AssertionError.js';\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nexport function assert(assertion, errorCode) {\n  if (!assertion) {\n    throw new AssertionError(errorCode);\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"762b873b5d6bf0b1ffc5fbb473e1ee52","cacheData":{"env":{}}}